#!/usr/bin/bash
#
# @file     dofocus
# @brief    script for taking focus images
#
# This script will change the telescope focus and record one or more images
# from the acam at each focus postion.
#

acampath="/data/acam/"$(date -u +%Y%m%d)
if [ ! -d $acampath ]; then $(mkdir $acampath); fi
slicecampath="/data/slicecam/"$(date -u +%Y%m%d)
if [ ! -d $slicecampath ]; then $(mkdir $slicecampath); fi

# @fn     usage
# @brief  display usage
#
function usage {
        echo "usage:"
        echo "  dofocus slicecam|acam|both <name> <num> <start> <stop> <step> [nexp]"
        echo "  "
        echo "  selects which camera to grab frames, slicecam, acam, or both"
        echo "  where <imname> base image name"
        echo "        <imnum>  starting image number"
        echo "        <start>  starting focus position"
        echo "        <stop>   ending focus position"
        echo "        <step>   focus step size"
        echo "        [<nexp>] is an optional number of exposures at each step"
        echo "  "
        echo "  Start/stop can be in any order, i.e. it can step up or down."
        echo "  Sign of the step is not needed, it's inferred."
        echo "  Integral number of steps need not fit in range of start/stop."
        echo "  "
        echo "  All images saved in /data/acam/YYYYMMDD and /data/slicecam/YYYYMMDD"
        echo "  Logfile written to /data/logs/focusout-YYYY-MM-DDTHHMM.txt"
        echo "  "
        echo "  All daemons (acamd, slicecamd, tcsd) must already be running and"
        echo "  open, configured with exposure time, etc."
        echo "  "
}

# @fn     sendto
# @brief  send command to a daemon
# @param  $1  name of daemon
# @param  $2  command
# @param  $3  arg
# @param  $n  arg
#
function sendto {
        daemon=$1
        shift 1
        command=""
        output=""
        while [ $# -gt 0 ]
        do
                command="$command $1"
                shift 1
        done
        output=$($daemon $command)
        echo $output
        if echo $output | grep ERROR; then
                echo "stopping due to an error"
                exit
        fi
}

# check number of arguments
#
if [ $# -lt 6 ]; then
  echo 1>&2 "not enough arguments"
  usage
  exit 2
elif [ $# -gt 7 ]; then
  echo 1>&2 "too many arguments"
  usage
  exit 2
fi

# assign positional arguments
#
cam=$1
imname="$2"
imnum="$3"
focus_start=$4
focus_stop=$5
focus_step=$6

# create an array of cameras and later will loop through this array
# to select slicecam, acam, or both
#
if [ $cam == "slicecam" ]; then
    whichcam=("scam")
    imagepath=($slicecampath)
elif [ $cam == "acam" ]; then
    whichcam=("acam")
    imagepath=($acampath)
elif [ $cam == "both" ]; then
    whichcam=("acam" "scam")
    imagepath=($acampath $slicecampath)
else
    echo "unrecognized camera \""$cam"\". expected slicecam|acam|both"
    exit
fi

datetime=$(date +"%Y-%m-%dT%H%M")
focusout="/data/logs/focusout-"$datetime".txt"

# optional 7th arg. If not included then nexp=1
#
if [ -z "$7" ]; then nexp=1; else nexp=$7; fi

echo "nexp="$nexp

# check that args needing numbers are numbers
#
re='^[+-]?[0-9]+([.][0-9]+)?$'
if ! [[ $imnum =~ $re ]]       ; then echo "image num \""$imnum"\" is not a number"; exit; fi
if ! [[ $focus_start =~ $re ]] ; then echo "focus start \""$focus_start"\" is not a number"; exit; fi
if ! [[ $focus_stop =~ $re ]]  ; then echo "focus stop \""$focus_stop"\" is not a number"  ; exit; fi
if ! [[ $focus_step =~ $re ]]  ; then echo "focus step \""$focus_step"\" is not a number"  ; exit; fi

# which direction is focus going, up or down?
#
if [ 1 -eq "$(echo "$focus_start > $focus_stop" | bc -l )" ]; then
    down=true
    if [ 1 -eq "$(echo "$focus_step > 0" | bc -l )" ]; then
        focus_step=$(echo "-1 * $focus_step" | bc -l )
    fi
elif [ 1 -eq "$(echo "$focus_start < $focus_stop" | bc -l )" ]; then
    up=true
else
    echo "ERROR! check start and stop (maybe the same?)"
    exit
fi

if [ ! -d $imagepath ] ; then mkdir $imagepath; fi

# After sending a framegrab command, wait a bit to make sure it's done.
# Get exposure time(s) from camera(s), add to that 0.5 sec, and
# multiply by 1.5 -- that's how long to wait.
#
sleeptime=()
for i in "${!whichcam[@]}"
do
    echo "setting up "${whichcam[$i]}
    output=$(sendto ${whichcam[$i]} exptime)
    exptime=$(echo "$output" | awk '{print $1}')
    doutput=$(echo "($exptime + 0.5) * 1.5" | bc)
    sleeptime+=("$doutput")

    # this is also a good time to stop the continuous frame grabbing
    #
    output=$(sendto ${whichcam[$i]} framegrab stop)
done

# go to the starting focus position
#
echo "moving to focus start "$focus_start
output=$(sendto tcs setfocus $focus_start)
focus_goal=$focus_start

echo "focus, file" >> $focusout

# loop forever until stop is reached
#
while : ; do

    # wait until we get there
    #
    focusreply=$(sendto tcs getfocus)
    focusnow=$(echo $focusreply| cut -d' ' -f 1)

    while [ 1 -eq "$(echo "$focusnow != $focus_goal" | bc -l )" ]
    do
        echo "current focus="$focusnow" ... waiting for "$focus_goal
        focusreply=$(sendto tcs getfocus)
        focusnow=$(echo $focusreply| cut -d' ' -f 1)
        sleep 1
    done

    echo "current focus="$focusnow

    sleep 2  # settling

    # take "nexp" exposures at this focus
    #
    exposure=1
    while : ; do
        echo "exposing "$exposure"/"$nexp
        for i in "${!whichcam[@]}"
        do
            # the command to acquire and save a single frame is framegrabe saveone <filename>
            # assemble the filename and send the command
            #
            filename=${imagepath[$i]}"/"$imname"_"$((imnum))"_"$exposure".fits"
            output=$(sendto ${whichcam[$i]} framegrab saveone $filename)

            # wait for completion
            #
            sleep "${sleeptime[$i]}"
        done
        echo $focusnow", "$filename >> $focusout
        # increment the exposure counter at this focus position
        #
        exposure=$((exposure+1))
        [[ $exposure > $nexp ]] && break
    done

    # increment the focus position counter
    #
    imnum=$((imnum+1))

    # set new focus goal
    # focus_step is signed appropriately so always use addition here
    #
    focus_goal=$(echo "$focus_goal + $focus_step" | bc -l )

    # break while loop when goal reached
    #
    if [ "$up" == true ]; then
        if [ 1 -eq "$(echo "$focus_goal > $focus_stop" | bc -l )" ]; then break; fi
    fi

    if [ "$down" == true ]; then
        if [ 1 -eq "$(echo "$focus_goal < $focus_stop" | bc -l )" ]; then break; fi
    fi

    # if we didn't break then go to the next position and keep looping
    #
    echo "moving to next focus position "$focus_goal" ..."
    output=$(sendto tcs setfocus $focus_goal)

done

# restore framegrabbing
#
for i in "${!whichcam[@]}"
do
    output=$(sendto ${whichcam[$i]} framegrab start)
done

echo "done!"
