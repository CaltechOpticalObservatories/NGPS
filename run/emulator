#!/bin/bash
#
# This script starts emulator daemons, either the one specified by name, or all of them
#

# @fn:     usage
# @brief:  displays usage
# @param:  none
# @return: none
#
usage() {
	echo "Usage:"
	echo "	emulator start | stop | reload <module> [ <module> ... ]"
	echo "	emulator status"
	echo "	emulator list"
	echo ""
	exit
}

# @fn:     start_proc
# @brief:  runs a process as a daemon
# @param:  $1 = friendly name of process to start
# @param:  $2 = full path to process
# @param:  $3 = full path to process config file
# @return: 1 if process running, 0 if not
#
start_proc( ) {
	# Check if there are any existing processes with this name
	#
	fproc=$(eval "pgrep -f $2")
	nproc=$(eval "pgrep -c -f $2")
	if [ $nproc -gt 0 ]; then
		echo "$1 already running with PID $fproc"
		return 1
	fi

	# build and execute the command
	echo "starting "$1"..."
	#
	cmd="$2 $3"$DAEMON
	output=$(eval "$cmd")

	# wait 1 sec and check if the process is running
	#
	sleep 1
	running=$(eval "pgrep -c -f $2")
	if [ $running -lt 1 ]; then
		echo "error starting $1"
		return 0
	else
		echo "$1 running"
		return 1
	fi
}

# Get the fully qualified paths for each process and their config files here
#
source ~/Software/run/ngps-config

# Force daemon mode by default by adding " -d" to the command line
#
DAEMON=" -d"

if [ "$1" == "start" ]; then
	shift
	if [ $# == 0 ]; then
		usage
	fi

	for procname in "$@"
	do
		# Option to not pass the " -d" argument which forces daemon mode, but
		# can't guarantee that the config file doesn't override with DAEMON=yes
		#
		if [ "$procname" == "--no-daemon" ]; then
			DAEMON=""

		# For "start all" loop through all $EMULATORS and start each one.
		#
		elif [ "$procname" == "all" ]; then
			for i in "${!EMULATORS[@]}"; do
				start_proc ${EMUNAMES[$i]} ${EMULATORS[$i]} ${CONFIGS[$i]}
			done

		# Otherwise, search the $EMUNAMES array for the specified procname
		# and start only that one.
		#
		else
			namefound="false"

			for i in "${!EMUNAMES[@]}"; do
				if [ $procname == "${EMUNAMES[$i]}" ]; then
					start_proc ${EMUNAMES[$i]} ${EMULATORS[$i]} ${CONFIGS[$i]}
					namefound="true"
				fi
			done

			if [ "$namefound" == "false" ]; then
				echo "ERROR: unrecognized module: "$procname
			fi
		fi
	done

elif [ "$1" == "stop" ]; then
	shift
	for procname in "$@"
	do
		# For "stop all" loop through all $EMULATORS
		# If running then kill it.
		#
		if [ "$procname" == "all" ]; then
			for i in "${!EMULATORS[@]}"; do
				running=$(eval "pgrep -c -f ${EMULATORS[$i]}")
				if [ $running -gt 0 ]; then
					echo "killing "${EMUNAMES[$i]}
					$(eval "pkill -f ${EMULATORS[$i]}")
				fi
			done
			exit 0

		# Otherwise search all $EMUNAMES for the specified $procname
		# If running then kill only that one.
		#
		else
			namefound="false"

			for i in "${!EMUNAMES[@]}"; do
				if [ $procname == "${EMUNAMES[$i]}" ]; then
					running=$(eval "pgrep -c -f ${EMULATORS[$i]}")
					procid=$(eval "pgrep -f ${EMULATORS[$i]}")
					namefound="true"
					if [ $running -gt 0 ]; then
						echo "killing "$procname
						$(eval "pkill -f ${EMULATORS[$i]}")
#						$(eval "kill -9  $procid")
					fi
				fi
			done

			if [ "$namefound" == "false" ]; then
				echo "ERROR: unrecognized module: "$procname
			fi
		fi

	done

elif [ "$1" == "status" ]; then
	shift
	for i in "${!EMULATORS[@]}"; do
		running=$(eval "pgrep -c -f ${EMULATORS[$i]}")
		procid=$(eval "pgrep -f ${EMULATORS[$i]}")
		if [ $running -gt 0 ]; then
			echo "  ${EMUNAMES[$i]} is running with pid $procid"
		else
			echo "* ${EMUNAMES[$i]} is not running"
		fi
	done

elif [ "$1" == "list" ]; then
	echo "recognized modules:"
	echo "	all"
	for name in "${EMUNAMES[@]}"; do
		echo "	$name"
	done
	exit
else
	usage
fi
