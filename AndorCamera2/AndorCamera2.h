/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class andor2_AndorCamera2 */

#ifndef _Included_andor2_AndorCamera2
#define _Included_andor2_AndorCamera2
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     andor2_AndorCamera2
 * Method:    acquire
 * Signature: (ILjava/lang/String;Z)[I
 */
JNIEXPORT jintArray JNICALL Java_andor2_AndorCamera2_acquire
  (JNIEnv *, jclass, jint, jstring, jboolean);

/*
 * Class:     andor2_AndorCamera2
 * Method:    setCamera
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_setCamera
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     andor2_AndorCamera2
 * Method:    getProgress
 * Signature: (I)[D
 */
JNIEXPORT jdoubleArray JNICALL Java_andor2_AndorCamera2_getProgress
  (JNIEnv *, jclass, jint);
/*
 * Class:     andor2_AndorCamera2
 * Method:    addHeaderCard
 * Signature: (Ljava/lang/String;I)I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_addHeaderCard
  (JNIEnv *, jclass, jstring, jint);
/*
 * Class:     andor2_AndorCamera2
 * Method:    initializeCamera
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_initializeCamera
(JNIEnv *, jclass, jint);
/*
 * Class:     andor2_AndorCamera2
 * Method:    Initialize
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_Initialize
  (JNIEnv *, jclass);

/*
 * Class:     andor2_AndorCamera2
 * Method:    GetAvailableCameras
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_GetAvailableCameras
  (JNIEnv *, jclass);

/*
 * Class:     andor2_AndorCamera2
 * Method:    GetCameraHandle
 * Signature: (I)J
 */
JNIEXPORT jlong JNICALL Java_andor2_AndorCamera2_GetCameraHandle
  (JNIEnv *, jclass, jint);

/*
 * Class:     andor2_AndorCamera2
 * Method:    SetCurrentCamera
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_SetCurrentCamera
  (JNIEnv *, jclass, jint);

/*
 * Class:     andor2_AndorCamera2
 * Method:    GetCurrentCamera
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_GetCurrentCamera
  (JNIEnv *, jclass);

/*
 * Class:     andor2_AndorCamera2
 * Method:    ShutDown
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_ShutDown
  (JNIEnv *, jclass);
/*
 * Class:     andor2_AndorCamera2
 * Method:    EnableKeepCleans
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_EnableKeepCleans
  (JNIEnv *, jclass, jint);

/*
 * Class:     andor2_AndorCamera2
 * Method:    PrepareAcquisition
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_PrepareAcquisition
  (JNIEnv *, jclass);

/*
 * Class:     andor2_AndorCamera2
 * Method:    StartAcquisition
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_StartAcquisition
  (JNIEnv *, jclass);
/*
 * Class:     andor2_AndorCamera2
 * Method:    SendSoftwareTrigger
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_SendSoftwareTrigger
  (JNIEnv *, jclass);

/*
 * Class:     andor2_AndorCamera2
 * Method:    AbortAcquisition
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_AbortAcquisition
  (JNIEnv *, jclass);

/*
 * Class:     andor2_AndorCamera2
 * Method:    CancelWait
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_CancelWait
  (JNIEnv *, jclass);
/*
 * Class:     andor2_AndorCamera2
 * Method:    FreeInternalMemory
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_FreeInternalMemory
  (JNIEnv *, jclass);

/*
 * Class:     andor2_AndorCamera2
 * Method:    SetExposureTime
 * Signature: (F)I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_SetExposureTime
  (JNIEnv *, jclass, jfloat);
/*
 * Class:     andor2_AndorCamera2
 * Method:    GetFKExposureTime
 * Signature: ()F
 */
JNIEXPORT jfloat JNICALL Java_andor2_AndorCamera2_GetFKExposureTime
  (JNIEnv *, jclass);

/*
 * Class:     andor2_AndorCamera2
 * Method:    SetHighCapacity
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_SetHighCapacity
  (JNIEnv *, jclass, jint);
/*
 * Class:     andor2_AndorCamera2
 * Method:    GetNumberADChannels
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_GetNumberADChannels
  (JNIEnv *, jclass);

/*
 * Class:     andor2_AndorCamera2
 * Method:    SetADChannel
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_SetADChannel
  (JNIEnv *, jclass, jint);

/*
 * Class:     andor2_AndorCamera2
 * Method:    GetBitDepth
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_GetBitDepth
  (JNIEnv *, jclass, jint);

/*
 * Class:     andor2_AndorCamera2
 * Method:    GetMaximumExposure
 * Signature: ()F
 */
JNIEXPORT jfloat JNICALL Java_andor2_AndorCamera2_GetMaximumExposure
  (JNIEnv *, jclass);

/*
 * Class:     andor2_AndorCamera2
 * Method:    SetAcquisitionMode
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_SetAcquisitionMode
  (JNIEnv *, jclass, jint);
/*
 * Class:     andor2_AndorCamera2
 * Method:    SetNumberAccumulations
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_SetNumberAccumulations
  (JNIEnv *, jclass, jint);

/*
 * Class:     andor2_AndorCamera2
 * Method:    SetAccumulationCycleTime
 * Signature: (F)I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_SetAccumulationCycleTime
  (JNIEnv *, jclass, jfloat);

/*
 * Class:     andor2_AndorCamera2
 * Method:    GetCapabilities
 * Signature: (Landor2/AndorCapabilities;)V
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_GetCapabilities
  (JNIEnv *, jclass, jobject);
/*
 * Class:     andor2_AndorCamera2
 * Method:    GetControllerCardModel
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_andor2_AndorCamera2_GetControllerCardModel
  (JNIEnv *, jclass);

/*
 * Class:     andor2_AndorCamera2
 * Method:    GetCameraSerialNumber
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_GetCameraSerialNumber
  (JNIEnv *, jclass);

/*
 * Class:     andor2_AndorCamera2
 * Method:    GetAcquisitionProgress
 * Signature: ()[J
 */
JNIEXPORT jlongArray JNICALL Java_andor2_AndorCamera2_GetAcquisitionProgress
  (JNIEnv *, jclass);
/*
 * Class:     andor2_AndorCamera2
 * Method:    GetDetector
 * Signature: ()[I
 */
JNIEXPORT jintArray JNICALL Java_andor2_AndorCamera2_GetDetector
  (JNIEnv *, jclass);

/*
 * Class:     andor2_AndorCamera2
 * Method:    GetSoftwareVersion
 * Signature: ()[I
 */
JNIEXPORT jintArray JNICALL Java_andor2_AndorCamera2_GetSoftwareVersion
  (JNIEnv *, jclass);

/*
 * Class:     andor2_AndorCamera2
 * Method:    GetHardwareVersion
 * Signature: ()[I
 */
JNIEXPORT jintArray JNICALL Java_andor2_AndorCamera2_GetHardwareVersion
  (JNIEnv *, jclass);

/*
 * Class:     andor2_AndorCamera2
 * Method:    GetAcquisitionTimings
 * Signature: ()[F
 */
/*
 * Class:     andor2_AndorCamera2
 * Method:    GetHeadModel
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_andor2_AndorCamera2_GetHeadModel
  (JNIEnv *, jclass);

/*
 * Class:     andor2_AndorCamera2
 * Method:    SetMetaData
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_SetMetaData
  (JNIEnv *, jclass, jint);

/*
 * Class:     andor2_AndorCamera2
 * Method:    GetPixelSize
 * Signature: ()[F
 */
JNIEXPORT jfloatArray JNICALL Java_andor2_AndorCamera2_GetPixelSize
  (JNIEnv *, jclass);

/*
 * Class:     andor2_AndorCamera2
 * Method:    GetVersionInfo_sdk
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_andor2_AndorCamera2_GetVersionInfo_1sdk
  (JNIEnv *, jclass);

/*
 * Class:     andor2_AndorCamera2
 * Method:    GetVersionInfo_device_driver
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_andor2_AndorCamera2_GetVersionInfo_1device_1driver
  (JNIEnv *, jclass);
/*
 * Class:     andor2_AndorCamera2
 * Method:    GetSizeOfCircularBuffer
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_GetSizeOfCircularBuffer
  (JNIEnv *, jclass);

/*
 * Class:     andor2_AndorCamera2
 * Method:    GetMinimumImageLength
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_GetMinimumImageLength
  (JNIEnv *, jclass);
/*
 * Class:     andor2_AndorCamera2
 * Method:    IsAmplifierAvailable
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_andor2_AndorCamera2_IsAmplifierAvailable
  (JNIEnv *, jclass, jint);

/*
 * Class:     andor2_AndorCamera2
 * Method:    GetNumberAmp
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_GetNumberAmp
  (JNIEnv *, jclass);

/*
 * Class:     andor2_AndorCamera2
 * Method:    GetAmpDesc
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_andor2_AndorCamera2_GetAmpDesc
  (JNIEnv *, jclass, jint);

/*
 * Class:     andor2_AndorCamera2
 * Method:    GetAmpMaxSpeed
 * Signature: (I)F
 */
JNIEXPORT jfloat JNICALL Java_andor2_AndorCamera2_GetAmpMaxSpeed
  (JNIEnv *, jclass, jint);

/*
 * Class:     andor2_AndorCamera2
 * Method:    GetNumberPreAmpGains
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_GetNumberPreAmpGains
  (JNIEnv *, jclass);

/*
 * Class:     andor2_AndorCamera2
 * Method:    IsPreAmpGainAvailable
 * Signature: (IIII)Z
 */
JNIEXPORT jboolean JNICALL Java_andor2_AndorCamera2_IsPreAmpGainAvailable
  (JNIEnv *, jclass, jint, jint, jint, jint);

/*
 * Class:     andor2_AndorCamera2
 * Method:    SetPreAmpGain
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_SetPreAmpGain
  (JNIEnv *, jclass, jint);

/*
 * Class:     andor2_AndorCamera2
 * Method:    GetPreAmpGain
 * Signature: (I)F
 */
JNIEXPORT jfloat JNICALL Java_andor2_AndorCamera2_GetPreAmpGain
  (JNIEnv *, jclass, jint);
/*
 * Class:     andor2_AndorCamera2
 * Method:    GetPreAmpGainText
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_andor2_AndorCamera2_GetPreAmpGainText
  (JNIEnv *, jclass, jint);

/*
 * Class:     andor2_AndorCamera2
 * Method:    IsInternalMechanicalShutter
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_andor2_AndorCamera2_IsInternalMechanicalShutter
  (JNIEnv *, jclass);

/*
 * Class:     andor2_AndorCamera2
 * Method:    SetShutter
 * Signature: (IIII)I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_SetShutter
  (JNIEnv *, jclass, jint, jint, jint, jint);

/*
 * Class:     andor2_AndorCamera2
 * Method:    SetShutterEx
 * Signature: (IIIII)I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_SetShutterEx
  (JNIEnv *, jclass, jint, jint, jint, jint, jint);

/*
 * Class:     andor2_AndorCamera2
 * Method:    GetTotalNumberImagesAcquired
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_GetTotalNumberImagesAcquired
  (JNIEnv *, jclass);

/*
 * Class:     andor2_AndorCamera2
 * Method:    GetNumberAvailableImages
 * Signature: ()[I
 */
JNIEXPORT jintArray JNICALL Java_andor2_AndorCamera2_GetNumberAvailableImages
  (JNIEnv *, jclass);

/*
 * Class:     andor2_AndorCamera2
 * Method:    GetNumberNewImages
 * Signature: ()[I
 */
JNIEXPORT jintArray JNICALL Java_andor2_AndorCamera2_GetNumberNewImages
  (JNIEnv *, jclass);

/*
 * Class:     andor2_AndorCamera2
 * Method:    GetAcquiredData
 * Signature: (I)[I
 */
JNIEXPORT jintArray JNICALL Java_andor2_AndorCamera2_GetAcquiredData
  (JNIEnv *, jclass, jint);

/*
 * Class:     andor2_AndorCamera2
 * Method:    GetNewData
 * Signature: (I)[I
 */
JNIEXPORT jintArray JNICALL Java_andor2_AndorCamera2_GetNewData
  (JNIEnv *, jclass, jint);

/*
 * Class:     andor2_AndorCamera2
 * Method:    GetImages
 * Signature: (III)[I
 */
JNIEXPORT jintArray JNICALL Java_andor2_AndorCamera2_GetImages
  (JNIEnv *, jclass, jint, jint, jint);

/*
 * Class:     andor2_AndorCamera2
 * Method:    GetMostRecentImage
 * Signature: (I)[I
 */
JNIEXPORT jintArray JNICALL Java_andor2_AndorCamera2_GetMostRecentImage
  (JNIEnv *, jclass, jint);

/*
 * Class:     andor2_AndorCamera2
 * Method:    GetOldestImage
 * Signature: (I)[I
 */
JNIEXPORT jintArray JNICALL Java_andor2_AndorCamera2_GetOldestImage
  (JNIEnv *, jclass, jint);
/*
 * Class:     andor2_AndorCamera2
 * Method:    GetAcquiredData16
 * Signature: (I)[S
 */
JNIEXPORT jshortArray JNICALL Java_andor2_AndorCamera2_GetAcquiredData16
  (JNIEnv *, jclass, jint);

/*
 * Class:     andor2_AndorCamera2
 * Method:    GetNewData16
 * Signature: (I)[S
 */
JNIEXPORT jshortArray JNICALL Java_andor2_AndorCamera2_GetNewData16
  (JNIEnv *, jclass, jint);

/*
 * Class:     andor2_AndorCamera2
 * Method:    GetImages16
 * Signature: (III)[S
 */
JNIEXPORT jshortArray JNICALL Java_andor2_AndorCamera2_GetImages16
  (JNIEnv *, jclass, jint, jint, jint);

/*
 * Class:     andor2_AndorCamera2
 * Method:    GetMostRecentImage16
 * Signature: (I)[S
 */
JNIEXPORT jshortArray JNICALL Java_andor2_AndorCamera2_GetMostRecentImage16
  (JNIEnv *, jclass, jint);

/*
 * Class:     andor2_AndorCamera2
 * Method:    GetOldestImage16
 * Signature: (I)[S
 */
JNIEXPORT jshortArray JNICALL Java_andor2_AndorCamera2_GetOldestImage16
  (JNIEnv *, jclass, jint);

/*
 * Class:     andor2_AndorCamera2
 * Method:    WaitForAcquisition
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_WaitForAcquisition
  (JNIEnv *, jclass);

/*
 * Class:     andor2_AndorCamera2
 * Method:    WaitForAcquisitionByHandle
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_WaitForAcquisitionByHandle
  (JNIEnv *, jclass, jint);

/*
 * Class:     andor2_AndorCamera2
 * Method:    WaitForAcquisitionByHandleTimeOut
 * Signature: (JI)I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_WaitForAcquisitionByHandleTimeOut
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     andor2_AndorCamera2
 * Method:    WaitForAcquisitionTimeOut
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_WaitForAcquisitionTimeOut
  (JNIEnv *, jclass, jint);
/*
 * Class:     andor2_AndorCamera2
 * Method:    GetStatus
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_GetStatus
  (JNIEnv *, jclass);


JNIEXPORT jfloatArray JNICALL Java_andor2_AndorCamera2_GetAcquisitionTimings
  (JNIEnv *, jclass);
/*
 * Class:     andor2_AndorCamera2
 * Method:    GetCameraEventStatus
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_GetCameraEventStatus
  (JNIEnv *, jclass);

/*
 * Class:     andor2_AndorCamera2
 * Method:    GetReadOutTime
 * Signature: ()F
 */
JNIEXPORT jfloat JNICALL Java_andor2_AndorCamera2_GetReadOutTime
  (JNIEnv *, jclass);

/*
 * Class:     andor2_AndorCamera2
 * Method:    GetKeepCleanTime
 * Signature: ()F
 */
JNIEXPORT jfloat JNICALL Java_andor2_AndorCamera2_GetKeepCleanTime
  (JNIEnv *, jclass);
/*
 * Class:     andor2_AndorCamera2
 * Method:    GetNumberHSSpeeds
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_GetNumberHSSpeeds
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     andor2_AndorCamera2
 * Method:    GetNumberVSSpeeds
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_GetNumberVSSpeeds
  (JNIEnv *, jclass);

/*
 * Class:     andor2_AndorCamera2
 * Method:    SetVSSpeed
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_SetVSSpeed
  (JNIEnv *, jclass, jint);

/*
 * Class:     andor2_AndorCamera2
 * Method:    GetVSSpeed
 * Signature: (I)F
 */
JNIEXPORT jfloat JNICALL Java_andor2_AndorCamera2_GetVSSpeed
  (JNIEnv *, jclass, jint);

/*
 * Class:     andor2_AndorCamera2
 * Method:    SetHSSpeed
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_SetHSSpeed
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     andor2_AndorCamera2
 * Method:    GetHSSpeed
 * Signature: (III)F
 */
JNIEXPORT jfloat JNICALL Java_andor2_AndorCamera2_GetHSSpeed
  (JNIEnv *, jclass, jint, jint, jint);

/*
 * Class:     andor2_AndorCamera2
 * Method:    GetFastestRecommendedVSSpeed_index
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_GetFastestRecommendedVSSpeed_1index
  (JNIEnv *, jclass);

/*
 * Class:     andor2_AndorCamera2
 * Method:    GetFastestRecommendedVSSpeed_speed
 * Signature: ()F
 */
JNIEXPORT jfloat JNICALL Java_andor2_AndorCamera2_GetFastestRecommendedVSSpeed_1speed
  (JNIEnv *, jclass);
/*
 * Class:     andor2_AndorCamera2
 * Method:    SetVSAmplitude
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_SetVSAmplitude
  (JNIEnv *, jclass, jint);

/*
 * Class:     andor2_AndorCamera2
 * Method:    GetNumberVSAmplitudes
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_GetNumberVSAmplitudes
  (JNIEnv *, jclass);

/*
 * Class:     andor2_AndorCamera2
 * Method:    GetVSAmplitudeValue
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_GetVSAmplitudeValue
  (JNIEnv *, jclass, jint);

/*
 * Class:     andor2_AndorCamera2
 * Method:    GetVSAmplitudeString
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_andor2_AndorCamera2_GetVSAmplitudeString
  (JNIEnv *, jclass, jint);

/*
 * Class:     andor2_AndorCamera2
 * Method:    GetVSAmplitudeFromString
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_GetVSAmplitudeFromString
  (JNIEnv *, jclass, jstring);

/*
 * Class:     andor2_AndorCamera2
 * Method:    SetEMAdvanced
 * Signature: (Z)I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_SetEMAdvanced
  (JNIEnv *, jclass, jboolean);

/*
 * Class:     andor2_AndorCamera2
 * Method:    SetEMCCDGain
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_SetEMCCDGain
  (JNIEnv *, jclass, jint);

/*
 * Class:     andor2_AndorCamera2
 * Method:    SetEMGainMode
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_SetEMGainMode
  (JNIEnv *, jclass, jint);

/*
 * Class:     andor2_AndorCamera2
 * Method:    GetEMCCDGain
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_GetEMCCDGain
  (JNIEnv *, jclass);

/*
 * Class:     andor2_AndorCamera2
 * Method:    GetEMGainRange
 * Signature: ()[I
 */
JNIEXPORT jintArray JNICALL Java_andor2_AndorCamera2_GetEMGainRange
  (JNIEnv *, jclass);

/*
 * Class:     andor2_AndorCamera2
 * Method:    SetOutputAmplifier
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_SetOutputAmplifier
  (JNIEnv *, jclass, jint);

/*
 * Class:     andor2_AndorCamera2
 * Method:    IsCoolerOn
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_andor2_AndorCamera2_IsCoolerOn
  (JNIEnv *, jclass);

/*
 * Class:     andor2_AndorCamera2
 * Method:    CoolerOFF
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_CoolerOFF
  (JNIEnv *, jclass);

/*
 * Class:     andor2_AndorCamera2
 * Method:    CoolerON
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_CoolerON
  (JNIEnv *, jclass);

/*
 * Class:     andor2_AndorCamera2
 * Method:    SetCoolerMode
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_SetCoolerMode
  (JNIEnv *, jclass, jint);

/*
 * Class:     andor2_AndorCamera2
 * Method:    GetTemperature
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_GetTemperature
  (JNIEnv *, jclass);

/*
 * Class:     andor2_AndorCamera2
 * Method:    GetTemperatureF
 * Signature: ()F
 */
JNIEXPORT jfloat JNICALL Java_andor2_AndorCamera2_GetTemperatureF
  (JNIEnv *, jclass);

/*
 * Class:     andor2_AndorCamera2
 * Method:    GetTemperature_status
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_GetTemperature_1status
  (JNIEnv *, jclass);

/*
 * Class:     andor2_AndorCamera2
 * Method:    GetTemperatureF_status
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_GetTemperatureF_1status
  (JNIEnv *, jclass);

/*
 * Class:     andor2_AndorCamera2
 * Method:    GetTemperatureRange
 * Signature: ()[I
 */
JNIEXPORT jintArray JNICALL Java_andor2_AndorCamera2_GetTemperatureRange
  (JNIEnv *, jclass);

/*
 * Class:     andor2_AndorCamera2
 * Method:    SetFanMode
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_SetFanMode
  (JNIEnv *, jclass, jint);

/*
 * Class:     andor2_AndorCamera2
 * Method:    SetTemperature
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_SetTemperature
  (JNIEnv *, jclass, jint);
/*
 * Class:     andor2_AndorCamera2
 * Method:    SetReadMode
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_SetReadMode
  (JNIEnv *, jclass, jint);


/*
 * Class:     andor2_AndorCamera2
 * Method:    SetFullImage
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_SetFullImage
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     andor2_AndorCamera2
 * Method:    SetImage
 * Signature: (IIIIII)I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_SetImage
  (JNIEnv *, jclass, jint, jint, jint, jint, jint, jint);
/*
 * Class:     andor2_AndorCamera2
 * Method:    GetImageFlip
 * Signature: ()[I
 */
JNIEXPORT jintArray JNICALL Java_andor2_AndorCamera2_GetImageFlip
  (JNIEnv *, jclass);

/*
 * Class:     andor2_AndorCamera2
 * Method:    SetImageFlip
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_SetImageFlip
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     andor2_AndorCamera2
 * Method:    GetImageRotate
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_GetImageRotate
  (JNIEnv *, jclass);

/*
 * Class:     andor2_AndorCamera2
 * Method:    SetImageRotate
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_SetImageRotate
  (JNIEnv *, jclass, jint);

/*
 * Class:     andor2_AndorCamera2
 * Method:    GetMaximumBinning
 * Signature: (I)[I
 */
JNIEXPORT jintArray JNICALL Java_andor2_AndorCamera2_GetMaximumBinning
  (JNIEnv *, jclass, jint);
/*
 * Class:     andor2_AndorCamera2
 * Method:    SetKineticCycleTime
 * Signature: (F)I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_SetKineticCycleTime
  (JNIEnv *, jclass, jfloat);

/*
 * Class:     andor2_AndorCamera2
 * Method:    SetNumberKinetics
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_SetNumberKinetics
  (JNIEnv *, jclass, jint);
/*
 * Class:     andor2_AndorCamera2
 * Method:    SetFrameTransferMode
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_andor2_AndorCamera2_SetFrameTransferMode
        (JNIEnv *, jclass , jint );
#ifdef __cplusplus
}
#endif
#endif
