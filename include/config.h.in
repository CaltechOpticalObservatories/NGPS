/**
 * @file    config.h.in
 * @brief   config.h input file used by CMAKE
 * @details 
 * @author  David Hale <dhale@astro.caltech.edu>
 *
 * The file "config.h" is automatically generated by cmake.
 * Do not make any changes to config.h, as they will be overwritten by cmake!
 * Make changes only to config.h.in
 *
 */

#ifndef ARCHONCONFIG_H
#define ARCHONCONFIG_H

#include <fstream>

// Default CONFIG_FILE is set in CMakeLists.txt in the toplevel directory.
// Do not change it here.
//
#define CONFIG_FILE @CONFIG_FILE@

  class Config {
    private:
    public:
      Config(std::string filename_in): n_elements(), vars(), params() {
        this->filename = filename_in;
      };
      Config(): n_elements(), vars(), params() { };

      ~Config() { };

      std::string filename;
      int n_elements;
      std::vector<std::string> vars;
      std::vector<std::string> params;


      /** Archon::Server::read_config **********************************************/
      /**
       * @fn     read_config
       * @brief  read the configuration file
       * @param  none
       * @return 
       *
       */
      long read_config(Config &config) {
        std::fstream filestream;

std::cerr << "(Config::read_config) config.filename = " << config.filename << std::endl;
        // if arg is specified then try to read specified config file
        //
        if ( filename.empty() ) {
          filestream.open( filename, std::ios::in );
std::cerr << "filestream.good() = " << filestream.good() << std::endl;
        }

        // if or no arg specified or unable to read file specified by arg,
        // then try to read ENV variable
        //
        if ( filestream.good() == false ) {
          const char* envfile = std::getenv("ARCHONSERVCFG");
          if (envfile != NULL) filestream.open( envfile, std::ios::in );
        }

        // nothing worked so return an error
        //
        if (filestream.good() == false) {
          perror("(Archon::Server::readconfig) no config file loaded");
          return ERROR;
        }
        return NO_ERROR;
      }
      /** Archon::Server::read_config **********************************************/

  };
#endif
