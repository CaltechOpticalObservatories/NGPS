/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package edu.caltech.palomar.instruments.ngps.server;

import edu.caltech.palomar.io.ClientSocket;
import java.awt.Color;
import java.beans.PropertyChangeEvent;
import javax.swing.ImageIcon;

/**
 *
 * @author jennifermilburn
 */
public class Simulator extends javax.swing.JFrame {
   public  ClientSocket           myClientSocket;
   private java.lang.String       TERMINATOR         = new java.lang.String("\n");
   public static int              SERVER_PORT = 5690;
   public  ImageIcon              ON;
   public  ImageIcon              OFF;
   public  ImageIcon              UNKNOWN;  
   public   java.lang.String      USERDIR           = System.getProperty("user.dir");
   public   java.lang.String      SEP               = System.getProperty("file.separator");
   public   java.lang.String      IMAGE_CACHE       = new java.lang.String(SEP + "images" + SEP);

    /**
     * Creates new form Simulator
     */
    public Simulator() {
        initComponents();
        initializeComboBox();
        initializeClient();
    }
  public void initializeClient(){
      myClientSocket = new ClientSocket();
      myClientSocket.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
      public void propertyChange(java.beans.PropertyChangeEvent e) {
                 state_propertyChange(e);
              }
      });
      myClientSocket.setServerPort(SERVER_PORT);
      myClientSocket.setServerName("localhost");
      myClientSocket.startConnection(ClientSocket.USE_HOSTNAME);
  } 
  /*=============================================================================================
/     Property Change Listener for the Ephemeris_propertyChange
/=============================================================================================*/
  private void state_propertyChange(PropertyChangeEvent e)  {
     java.lang.String propertyName = e.getPropertyName();
     System.out.println(propertyName);
    if(propertyName.matches("connected")){
        java.lang.Boolean current_value = (java.lang.Boolean)e.getNewValue(); 
        if(current_value){
            send_commandButton.setIcon(ON);
        }else if(!current_value){
           send_commandButton.setIcon(OFF);
        }
    }
} 
/*=============================================================================================
/    PARAMETERS FROM THE JSKYCALCMODEL
/=============================================================================================*/
  public void sendCommand(){
      java.lang.String command_string =  "SET STATE "; 
      java.lang.String selected_command = (java.lang.String)commandComboBox.getSelectedItem();
      command_string = command_string+selected_command+TERMINATOR;
      if(myClientSocket.isConnected()){
          myClientSocket.sendCommand(command_string,false);
      }      
  }
/*=============================================================================================
/    initializeComboBox()
/=============================================================================================*/  
  public void initializeComboBox(){
      commandComboBox.removeAllItems();
      commandComboBox.addItem("STOPPED");
      commandComboBox.addItem("READY_NO_TARGETS");
      commandComboBox.addItem("READY_IDLE");
      commandComboBox.addItem("WAITING_FOR_TCS_OPERATOR");
      commandComboBox.addItem("SLEWING");
      commandComboBox.addItem("ACQUIRING");
      commandComboBox.addItem("WAITING_FOR_AIRMASS_LIMIT");
      commandComboBox.addItem("EXPOSING");
      commandComboBox.addItem("PAUSED");
      commandComboBox.addItem("STOPPING");
      commandComboBox.addItem("ABORTING");
      commandComboBox.addItem("STARTING");
      ON           = new ImageIcon(USERDIR + IMAGE_CACHE + "ON.png");
      OFF          = new ImageIcon(USERDIR + IMAGE_CACHE + "OFF.png");
      UNKNOWN      = new ImageIcon(USERDIR + IMAGE_CACHE + "UNKNOWN.gif");
      send_commandButton.setIcon(UNKNOWN);
  }
 /*       if(current_value.matches("STOPPED")){
        if(current_value.matches()){
        if(current_value.matches()){
        if(current_value.matches()){
        if(current_value.matches("SLEWING")){
        if(current_value.matches()){
        if(current_value.matches("WAITING_FOR_AIRMASS_LIMIT")){
        if(current_value.matches()){
        if(current_value.matches()){
        if(current_value.matches()){
        if(current_value.matches()){
        if(current_value.matches)){

  */
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        commandComboBox = new javax.swing.JComboBox<>();
        send_commandButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        commandComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        send_commandButton.setText("Send Command");
        send_commandButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                send_commandButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(commandComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(send_commandButton)
                .addContainerGap(52, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(commandComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(send_commandButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void send_commandButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_send_commandButtonActionPerformed
          sendCommand();
    }//GEN-LAST:event_send_commandButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Simulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Simulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Simulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Simulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Simulator().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> commandComboBox;
    private javax.swing.JButton send_commandButton;
    // End of variables declaration//GEN-END:variables
}
